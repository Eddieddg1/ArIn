#!/bin/bash

clear

if ! ping -c 1 google.com >/dev/null 2>&1; then
iwctl device list
read -p "Which of the devices do you want to use?: " NETWORKDEVICE
iwctl device $NETWORKDEVICE set-property Powered on
iwctl station $NETWORKDEVICE scan
iwctl station $NETWORKDEVICE get-networks
read -p "Which of the networks do you want to connect to?: " NETWORK
iwctl station $NETWORKDEVICE connect $NETWORK
fi

pacman -Syy

clear

sure1=n
sure2=n
sure3=n
sure4=n

while [[ ! ($sure1 == y && $sure2 == y && $sure3 == y && $sure4 == y || $sure1 == Y && $sure2 == Y && $sure3 == Y && $sure4 == Y || $sure1 == "" && $sure2 == "" && $sure3 == "" && $sure4 == "") ]]; do
    clear
#Yeet
    echo "Available disks:"
    fdisk -l | grep "Disk /dev/"
    read -p "Enter the disk to partition (e.g., sda, nvme0n1): " DISK

    if [[ ! $DISK =~ ^(sd[a-z]|nvme[0-9]n[0-9]|vd[a-z]|md[0-9]|loop[0-9])$ ]]; then
        read -p "Are you sure this is the one? y/n: " sure1
        read -p "Please double check just in case. y/n: " sure2
        read -p "100% sure? y/n: " sure3
        read -p "1000% sure? y/n: " sure4
    elif [[ $DISK =~ ^(sd[a-z]|nvme[0-9]n[0-9]|vd[a-z]|md[0-9]|loop[0-9])$ ]]; then
        read -p "Are you sure? y/n: " sure1
        sure2=$sure1
        sure3=$sure2
        sure4=$sure3
        break
    fi
done

if [[ $DISK == nvme* ]]; then
    PART_SUFFIX="p"
else
    PART_SUFFIX=""
fi

clear

read -p "Do you want a swap partition? y/n: " swappie
if [[ $swappie == y || $swappie == Y || $swappie == "" ]]; then
    read -p "Swap size. Just enter a number, said number will represent GB.(at least 4): " swappieSize
    swAttempts=0
    while [[ $swappieSize -lt 4 ]]; do
        echo "Too small, I said at least '4'."
        read -p "Swap size. Just enter a number, said number will represent GB.(at least 4): " swappieSize
        ((swAttempts++))
        if [[ $swAttempts -ge 10 ]]; then
            swappie=n
            break
        elif [[ $swAttempts -ge 3 ]]; then
            read -p "Do you really want a swap partition? y/n: " reallySwap
            if [[ $reallySwap == n || $reallySwap == N ]]; then
                swappie=n
                break
            fi
        fi
    done
fi

read -p "Do you want a seperate '/home' partition? y/n: " YesHome
if [[ $YesHome == y || $YesHome == Y || $YesHome == "" ]]; then
    read -p "Root partition size. Just enter a number, said number will represent GB.(at least 30): " RootSize
    rtAttempts=0
    while [[ $RootSize -lt 30 ]]; do
        echo "Too small, I said at least '30'."
        read -p "Root partition size. Just enter a number, said number will represent GB.(at least 30): " RootSize
        ((rtAttempts++))
        if [[ $rtAttempts -ge 10 ]]; then
            YesHome=n
            break
        elif [[ $rtAttempts -ge 3 ]]; then
            read -p "Do you really want a swap partition? y/n: " reallyHome
            if [[ $reallyHome == n || $reallyHome == N ]]; then
                YesHome=n
                break
            fi
        fi
    done
fi

clear

read -p "Do you want Wayland or Xorg(X11)?: " wayorg
while [[ ! ($wayorg == wayland || $wayorg == xorg || $wayorg == x11 || $wayorg == X11 || $wayorg == Xorg || $wayorg == Wayland) ]]; do
    echo "Wayland or Xorg"
    read -p "Please, copy one of the options above: " wayorg
done

if [[ $wayorg == wayland || $wayorg == Wayland ]]; then
    DisServ="wayland"
    DISSERV="wayland"
elif [[ $wayorg == xorg || $wayorg == Xorg || $wayorg == x11 || $wayorg == X11 ]]; then
    DisServ="xorg-server xorg-apps xorg-xinit"
    DISSERV="xorg"
fi

clear

echo "Here are the options if your choice is not here you can add it later when selecting packages."
echo "If your selected de/wm is in the aur it will get installed almost last please do not worry."
echo "Also, I had chatGpt give me these results."

if [[ $DISSERV == xorg ]]; then
    read -p "Desktop Enviroments then Window Managers or other way around? de/wm: " dewm

    de="KDE Plasma, GNOME, Xfce, LXQt, Cinnamon, MATE, Deepin, Budgie, Trinity, Enlightenment, Pantheon, UKUI, Lumina and Sugar"

    wm="i3, bspwm, awesome, xmonad, dwm, spectrwm, herbstluftwm, qtile, leftwm, Openbox, FVWM, IceWM and JWM"

    if [[ $dewm == de || $dewm == DE ]]; then
        echo "Desktop Enviroments: $de"
        echo "Window Managers: $wm"
        read -p "Select which de/wm: " dewmsel
    else
        echo "Window Managers: $wm"
        echo "Desktop Enviroments: $de"
        read -p "Select which de/wm: " dewmsel
    fi
elif [[ $DISSERV == wayland ]]; then
    read -p "Desktop Enviroments then Window Managers or other way around? de/wm: " dewm

    de="KDE Plasma, GNOME, Phosh, Cinnamon, LXQt and Budgie"

    wm="Sway, River, Wayfire, Hyprland, Labwc, Hikari, Cage, Cagebreak, Velox and dwl"

    if [[ $dewm == de || $dewm == DE ]]; then
        echo "Desktop Enviroments: $de"
        echo "Window Managers: $wm"
        read -p "Select which de/wm: " dewmsel
    else
        echo "Window Managers: $wm"
        echo "Desktop Enviroments: $de"
        read -p "Select which de/wm: " dewmsel
    fi
fi

case $dewmsel in
    "KDE Plasma")
        packageName="plasma"
        isinPacman=true
        isinAur=false
    ;;
    "GNOME")
        packageName="gnome"
        isinPacman=true
        isinAur=false
    ;;
    "Xfce")
        packageName="Xfce4"
        isinPacman=true
        isinAur=false
    ;;
    "LXQt")
        packageName="lxqt"
        isinPacman=true
        isinAur=false
    ;;
    "Cinnamon")
        packageName="cinnamon"
        isinPacman=true
        isinAur=false
    ;;
    "MATE")
        packageName="mate"
        isinPacman=true
        isinAur=false
    ;;
    "Deepin")
        packageName="deepin-desktop"
        isinPacman=true
        isinAur=false
    ;;
    "Budgie")
        packageName="budgie-desktop budgie-extras"
        isinPacman=true
        isinAur=false
    ;;
    "Trinity")
        packageName="trinity"
        isinPacman=false
        isinAur=true
    ;;
    "Enlightenment")
        packageName="enlightenment"
        isinPacman=true
        isinAur=false
    ;;
    "Pantheon")
        packageName="pantheon"
        isinPacman=true
        isinAur=false
    ;;
    "UKUI")
        packageName="ukui"
        isinPacman=true
        isinAur=false
    ;;
    "Lumina")
        packageName="lumina-desktop"
        isinPacman=false
        isinAur=true
    ;;
    "Sugar")
        packageName="sugar"
        isinPacman=true
        isinAur=false
    ;;
    "Phosh")
        packageName="phosh"
        isinPacman=true
        isinAur=false
    ;;
    "i3")
        packageName="i3 dmenu"
        isinPacman=true
        isinAur=false
    ;;
    "bspwm")
        packageName="bspwm sxhkd"
        isinPacman=true
        isinAur=false
    ;;
    "awesome")
        packageName="awesome"
        isinPacman=true
        isinAur=false
    ;;
    "xmonad")
        packageName="xmonad"
        isinPacman=true
        isinAur=false
    ;;
    "dwm")
        packageName="dwm"
        isinPacman=false
        isinAur=true
    ;;
    "spectrwm")
        packageName="spectrwm"
        isinPacman=false
        isinAur=true
    ;;
    "herbstluftwm")
        packageName="herbstluftwm"
        isinPacman=true
        isinAur=false
    ;;
    "qtile")
        packageName="qtile"
        isinPacman=true
        isinAur=false
    ;;
    "leftwm")
        packageName="leftwm"
        isinPacman=false
        isinAur=true
    ;;
    "Openbox")
        packageName="openbox"
        isinPacman=true
        isinAur=false
    ;;
    "FVWM")
        packageName="fvwm3"
        isinPacman=false
        isinAur=true
    ;;
    "IceWM")
        packageName="icewm"
        isinPacman=true
        isinAur=false
    ;;
    "JWM")
        packageName="jwc"
        isinPacman=false
        isinAur=true
    ;;
    "Sway")
        packageName="sway"
        isinPacman=true
        isinAur=false
    ;;
    "River")
        packageName="river"
        isinPacman=true
        isinAur=false
    ;;
    "Wayfire")
        packageName="wayfire"
        isinPacman=false
        isinAur=true
    ;;
    "Hyprland")
        packageName="hyprland"
        isinPacman=true
        isinAur=false
    ;;
    "Labwc")
        packageName="labwc"
        isinPacman=false
        isinAur=true
    ;;
    "Hikari")
        packageName="hikari"
        isinPacman=false
        isinAur=true
    ;;
    "Cage")
        packageName="cage"
        isinPacman=true
        isinAur=false
    ;;
    "Cagebreak")
        packageName="cagebreak"
        isinPacman=false
        isinAur=true
    ;;
    "Velox")
        packageName="velox-git"
        isinPacman=false
        isinAur=true
    ;;
    "dwl")
        packageName="dwl"
        isinPacman=false
        isinAur=true
    ;;
    *)
    ;;
esac

if [[ $isinPacman == true && $isinAur == true ]]; then
    isinAur=false
elif [[ $isinPacman == false && $isinAur == false ]]; then
    isinGit=true
fi
if [[ $isinPacman == true ]]; then
    dewmPac=$packageName
elif [[ $isinAur == true ]]; then
    dewmAur=$packageName
fi

clear

read -p "What terminal do you want to use? Please enter pacman package name.(Blank for alacritty): " term

if [[ $term == "" ]]; then
    term=alacritty
fi

clear

read -p "Amd, Nvidia or Intel?: " gpuvendor

while [[ ! ($gpuvendor == Intel || $gpuvendor == intel || $gpuvendor == amd || $gpuvendor == Amd || $gpuvendor == nvidia || $gpuvendor == Nvidia) ]]; do
        read -p "Amd, Nvidia or Intel?: " gpuvendor
done

read -p "Do you want Open-Source Grapichs Drivers? y/n: " gpudriver

if [[ $gpudriver == y || $gpudriver == Y || $gpudriver == "" ]]; then
    if [[ $gpuvendor == amd || $gpuvendor == Amd ]]; then
        gpudrev=amd-open
    elif [[ $gpuvendor == nvidia || $gpuvendor == Nvidia ]]; then
        gpudrev=nvidia-open
    elif [[ $gpuvendor == Intel || $gpuvendor == intel ]]; then
        gpudrev=intel-open
    fi
elif [[ $gpudriver == n || $gpudriver == N ]]; then
    if [[ $gpuvendor == amd || $gpuvendor == Amd ]]; then
        gpudrev=amd-closed
    elif [[ $gpuvendor == nvidia || $gpuvendor == Nvidia ]]; then
        gpudrev=nvidia-closed
    elif [[ $gpuvendor == Intel || $gpuvendor == intel ]]; then
        gpudrev=intel-closed
    fi
fi

if [[ $gpudrev == amd-open ]]; then
    read -p "Do you have a radeon? y/n: " amdrad
    if [[ $amdrad == y || $amdrad == Y || $amdrad == "" ]]; then
        read -p "Is it R9 200 or newer? If older write old, if not leave blank: " amdage
    fi
    if [[ $amdage == old ]]; then
        driver="xf86-video-ati mesa vulkan-radeon"
    else
        driver="xf86-video-amdgpu mesa vulkan-radeon"
    fi
elif [[ $gpudrev == amd-closed ]]; then
    echo "Man figure it out."
fi

if [[ $gpudrev == nvidia-open ]]; then
    read -p "Do you want useable drivers? y/n: " nvidiause
    if [[ $nvidiause == n || $nvidiause == N ]]; then
        driver="xf86-video-nouveau nvidia-settings nvidia-utils mesa vulkan-nvidia"
    elif [[ $nvidiause == y || $nvidiause == Y || $nvidiause == "" ]]; then
        driver="nvidia-dkms nvidia-settings nvidia-utils mesa vulkan-nvidia"
    fi
elif [[ $gpudrev == nvidia-closed ]]; then
    driver="nvidia nvida-settings nvidia-utils mesa vulkan-nvidia"
fi

if [[ $gpudrev == intel-open ]]; then
    read -p "Is you intel gpu older than 2009? y/n: " intelage
    if [[ $intelage == y || $intelage == Y || $intelage == "" ]]; then
        echo "..."
        driver="xf86-video-intel mesa"
    else
        driver="mesa"
    fi
elif [[ $gpudrev == intel-closed ]]; then
    echo "Man figure it out."
fi

clear

read -p "What pacman packages do you want to install? (note: aur packages are after this): " userpacs
if [[ $dewmAur ]]; then
    echo "Note: without an aur helper you cannot install selected de/wm."
fi
read -p "Do you want an aur helper? y/n: " aurhelp
if [[ $aurhelp == y || $aurhelp == Y || $aurhelp == "" ]]; then
    echo "Here are your choices: yay, paru, pikaur, trizen and aura"
    read -p "If these do not tickle your fancy enter, no: " aurchoice
    while [[ ! ($aurchoice == yay || $aurchoice == paru || $aurchoice == pikaur || $aurchoice == trizen || $aurchoice == aura || $aurchoice == no) ]]; do
        read -p "If these do not tickle your fancy enter, no: " aurchoice
    done
else
    echo "If you do not install an aur helper now you can install one when booted."
fi

read -p "What aur packages do you want to install?: " aurpacs

clear

case $region in
    "Asia")
        cit="Aden, Almaty, Amman, Anadyr, Aqtau, Aqtobe, Ashgabat, Ashkhabad, Atyrau, Baghdad, Bahrain, Baku, Bangkok, Barnaul, Beirut, Bishkek, Brunei, Calcutta, Chita, Choibalsan, Chongqing, Chungking, Colombo, Dacca, Damascus, Dhaka, Dili, Dubai, Dushanbe, Famagusta, Gaza, Harbin, Hebron, Ho_Chi_Minh, Hong_Kong, Hovd, Irkutsk, Istanbul, Jakarta, Jayapura, Jerusalem, Kabul, Kamchatka, Karachi, Kashgar, Kathmandu, Katmandu, Khandyga, Kolkata, Krasnoyarsk, Kuala_Lumpur, Kuching, Kuwait, Macao, Macau, Magadan, Makassar, Manila, Muscat, Nicosia, Novokuznetsk, Novosibirsk, Omsk, Oral, Phnom_Penh, Pontianak, Pyongyang, Qatar, Qostanay, Qyzylorda, Rangoon, Riyadh, Saigon, Sakhalin, Samarkand, Seoul, Shanghai, Singapore, Srednekolymsk, Taipei, Tashkent, Tbilisi, Tehran, Tel_Aviv, Thimbu, Thimphu, Tokyo, Tomsk, Ujung_Pandang, Ulaanbaatar, Ulan_Bator, Urumqi, Ust-Nera, Vientiane, Vladivostok, Yakutsk, Yangon, Yekaterinburg and Yerevan"
    ;;
    "Brazil")
        cit="Acre, DeNoronha, East and West"
    ;;
    "Pacific")
        cit="Apia, Auckland, Bougainville, Chatham, Chuuk, Easter, Efate, Enderbury, Fakaofo, Fiji, Funafuti, Galapagos, Gambier, Guadalcanal, Guam, Honolulu, Johnston, Kanton, Kiritimati, Kosrae, Kwajalein, Majuro, Marquesas, Midway, Nauru, Niue, Norfolk, Noumea, Pago_Pago, Palau, Pitcairn, Pohnpei, Ponape, Port_Moresby, Rarotonga, Saipan, Samoa, Tahiti, Tarawa, Tongatapu, Truk, Wake, Wallis and Yap"
    ;;
    "America")
        cit="Adak, Anchorage, Anguilla, Antigua, Araguaina, Argentina/Buenos_Aires, Argentina/Catamarca, Argentina/ComodRivadavia, Argentina/Cordoba, Argentina/Jujuy, Argentina/La_Rioja, Argentina/Mendoza, Argentina/Rio_Gallegos, Argentina/Salta, Argentina/San_Juan, Argentina/San_Luis, Argentina/Tucuman, Argentina/Ushuaia, Aruba, Asuncion, Atikokan, Atka, Bahia, Bahia_Banderas, Barbados, Belem, Belize, Blanc-Sablon, Boa_Vista, Bogota, Boise, Buenos_Aires, Cambridge_Bay, Campo_Grande, Cancun, Caracas, Catamarca, Cayenne, Cayman, Chicago, Chihuahua, Ciudad_Juarez, Coral_Harbour, Cordoba, Costa_Rica, Creston, Cuiaba, Curacao, Danmarkshavn, Dawson, Dawson_Creek, Denver, Detroit, Dominica, Edmonton, Eirunepe, El_Salvador, Ensenada, Fort_Nelson, Fort_Wayne, Fortaleza, Glace_Bay, Godthab, Goose_Bay, Grand_Turk, Grenada, Guadeloupe, Guatemala, Guayaquil, Guyana, Halifax, Havana, Hermosillo, Indiana/Indianapolis, Indiana/Knox, Indiana/Marengo, Indiana/Petersburg, Indiana/Tell_City, Indiana/Vevay, Indiana/Vincennes, Indiana/Winamac, Indianapolis, Inuvik, Iqaluit, Jamaica, Jujuy, Juneau, Kentucky/Louisville, Kentucky/Monticello, Knox_IN, Kralendijk, La_Paz, Lima, Los_Angeles, Louisville, Lower_Princes, Maceio, Managua, Manaus, Marigot, Martinique, Matamoros, Mazatlan, Mendoza, Menominee, Merida, Metlakatla, Mexico_City, Miquelon, Moncton, Monterrey, Montevideo, Montreal, Montserrat, Nassau, New_York, Nipigon, Nome, Noronha, North_Dakota/Beulah, North_Dakota/Center, North_Dakota/New_Salem, Nuuk, Ojinaga, Panama, Pangnirtung, Paramaribo, Phoenix, Port-au-Prince, Port_of_Spain, Porto_Acre, Porto_Velho, Puerto_Rico, Punta_Arenas, Rainy_River, Rankin_Inlet, Recife, Regina, Resolute, Rio_Branco, Rosario, Santa_Isabel, Santarem, Santiago, Santo_Domingo, Sao_Paulo, Scoresbysund, Shiprock, Sitka, St_Barthelemy, St_Johns, St_Kitts, St_Lucia, St_Thomas, St_Vincent, Swift_Current, Tegucigalpa, Thule, Thunder_Bay, Tijuana, Toronto, Tortola, Vancouver, Virgin, Whitehorse, Winnipeg, Yakutat and Yellowknife"
    ;;
    "Mexico")
        cit="BajaNorte, BajaSur and General"
    ;;
    "Antarctica")
        cit="Casey, Davis, DumontDUrville, Macquarie, Mawson, McMurdo, Palmer, Rothera, South_Pole, Syowa, Troll and Vostok"
    ;;
    "Arctic")
        cit="Longyearbyen"
    ;;
    "Australia")
        cit="ACT, Adelaide, Brisbane, Broken_Hill, Canberra, Currie, Darwin, Eucla, Hobart, LHI, Lindeman, Lord_Howe, Melbourne, NSW, North, Perth, Queensland, South, Sydney, Tasmania, Victoria, West and Yancowinna"
    ;;
    "Europe")
        cit="Amsterdam, Andorra, Astrakhan, Athens, Belfast, Belgrade, Berlin, Bratislava, Brussels, Bucharest, Budapest, Busingen, Chisinau, Copenhagen, Dublin, Gibraltar, Guernsey, Helsinki, Isle_of_Man, Istanbul, Jersey, Kaliningrad, Kiev, Kirov, Kyiv, Lisbon, Ljubljana, London, Luxembourg, Madrid, Malta, Mariehamn, Minsk, Monaco, Moscow, Nicosia, Oslo, Paris, Podgorica, Prague, Riga, Rome, Samara, San_Marino, Sarajevo, Saratov, Simferopol, Skopje, Sofia, Stockholm, Tallinn, Tirane, Tiraspol, Ulyanovsk, Uzhgorod, Vaduz, Vatican, Vienna, Vilnius, Volgograd, Warsaw, Zagreb, Zaporozhye and Zurich"
    ;;
    "Indian")
        cit="Antananarivo, Chagos, Christmas, Cocos, Comoro, Kerguelen, Mahe, Maldives, Mauritius, Mayotte and Reunion"
    ;;
    "Africa")
        cit="Abidjan, Accra, Addis_Ababa, Algiers, Asmara, Asmera, Bamako, Bangui, Banjul, Bissau, Blantyre, Brazzaville, Bujumbura, Cairo, Casablanca, Ceuta, Conakry, Dakar, Dar_es_Salaam, Djibouti, Douala, El_Aaiun, Freetown, Gaborone, Harare, Johannesburg, Juba, Kampala, Khartoum, Kigali, Kinshasa, Lagos, Libreville, Lome, Luanda, Lubumbashi, Lusaka, Malabo, Maputo, Maseru, Mbabane, Mogadishu, Monrovia, Nairobi, Ndjamena, Niamey, Nouakchott, Ouagadougou, Porto-Novo, Sao_Tome, Timbuktu, Tripoli, Tunis and Windhoek"
    ;;
    "US")
        cit="Alaska, Aleutian, Arizona, Central, East-Indiana, Eastern, Hawaii, Indiana-Starke, Michigan, Mountain, Pacific and Samoa"
    ;;
    "Canada")
        cit="Atlantic, Central, Eastern, Mountain, Newfoundland, Pacific, Saskatchewan and Yukon"
    ;;
    "Atlantic")
        cit="Azores, Bermuda, Canary, Cape_Verde, Faeroe, Faroe, Jan_Mayen, Madeira, Reykjavik, South_Georgia, St_Helena and Stanley"
    ;;
    "Etc")
        cit="GMT, GMT+0, GMT+1, GMT+10, GMT+11, GMT+12, GMT+2, GMT+3, GMT+4, GMT+5, GMT+6, GMT+7, GMT+8, GMT+9, GMT-0, GMT-1, GMT-10, GMT-11, GMT-12, GMT-13, GMT-14, GMT-2, GMT-3, GMT-4, GMT-5, GMT-6, GMT-7, GMT-8, GMT-9, GMT0, Greenwich, UCT, UTC, Universal and Zulu"
    ;;
    "Chile")
        cit="Continental and EasterIsland"
    ;;
    *)
        cit=""
    ;;
esac

while [[  ]]; do
    clear
    echo "These are the available regions to choose from. (I did not decide the sturcture, I simply used a script to get 'region/city' from the region database in arch.)"
    echo ""
    echo "Asia, America, Atlantic, Arctic, Antarctica, Africa, Australia, Brazil, CET, CST6CDT, Canada, Cuba, Chile, EET, Europe, Etc, EST, EST5EDT, Egypt, Eire, Factory, GB, GB-Eire, GMT, GMT+0, GMT-0, GMT0, Greenwich, HST, Hongkong, Iceland, Iran, Israel, Indian, Jamaica, Japan, Kwajalein, Libya, MET, MST, MST7MDT, Mexico, NZ, NZ-CHAT, Navajo, PRC, Pacific, PST8PDT, Poland, Portugal, ROC, ROK, Singapore, Turkey, US, UCT, UTC, Universal, W-SU, WET and Zulu"
    read -p "Type what region to see available cities for said region: " region
    echo "$cit"
    read -p "What city do you want to use?: " city

    if [[ $city == "" ]]; then
        regioncity="$region"
    elif [[ $city != "" ]]; then
        regioncity="$region/$city"
    fi
done

clear

case $langchoice in
    "Afrikaans")
        lang="af_ZA.UTF-8"
        potkeymap="us"
    ;;
    "Albanian")
        lang="sq_AL.UTF-8"
        potkeymap="al"
    ;;
    "Arabic")
        lang="ar_SA.UTF-8"
        potkeymap="ar"
    ;;
    "Armenian")
        lang="hy_AM.UTF-8"
        potkeymap="am"
    ;;
    "Basque")
        lang="eu_ES.UTF-8"
        potkeymap="es"
    ;;
    "Belarusian")
        lang="be_BY.UTF-8"
        potkeymap="by"
    ;;
    "Bosnian")
        lang="bs_BA.UTF-8"
        potkeymap="ba"
    ;;
    "Bulgarian")
        lang="bg_BG.UTF-8"
        potkeymap="bg"
    ;;
    "Catalan")
        lang="ca_ES.UTF-8"
        potkeymap="es"
    ;;
    "Chinese (Simplified)")
        lang="zh_CN.UTF-8"
        potkeymap="cn"
    ;;
    "Chinese (Traditional)")
        lang="zh_TW.UTF-8"
        potkeymap="tw"
    ;;
    "Croatian")
        lang="hr_HR.UTF-8"
        potkeymap="hr"
    ;;
    "Czech")
        lang="cs_CZ.UTF-8"
        potkeymap="cz"
    ;;
    "Danish")
        lang="da_DK.UTF-8"
        potkeymap="dk"
    ;;
    "Dutch")
        lang="nl_NL.UTF-8"
        potkeymap="nl"
    ;;
    "English (US)")
        lang="en_US.UTF-8"
        potkeymap="us"
    ;;
    "English (UK)")
        lang="en_GB.UTF-8"
        potkeymap="gb"
    ;;
    "English (Australia)")
        lang="en_AU.UTF-8"
        potkeymap="aus"
    ;;
    "English (Canada)")
        lang="en_CA.UTF-8"
        potkeymap="ca"
    ;;
    "Finnish")
        lang="fi_FI.UTF-8"
        potkeymap="fi"
    ;;
    "French")
        lang="fr_FR.UTF-8"
        potkeymap="fr"
    ;;
    "French (Canada)")
        lang="fr_CA.UTF-8"
        potkeymap="ca"
    ;;
    "German")
        lang="de_DE.UTF-8"
        potkeymap="de"
    ;;
    "Greek")
        lang="el_GR.UTF-8"
        potkeymap="gr"
    ;;
    "Hebrew")
        lang="he_IL.UTF-8"
        potkeymap="il"
    ;;
    "Hungarian")
        lang="hu_HU.UTF-8"
        potkeymap="hu"
    ;;
    "Icelandic")
        lang="is_IS.UTF-8"
        potkeymap="is"
    ;;
    "Italian")
        lang="it_IT.UTF-8"
        potkeymap="it"
    ;;
    "Japanese")
        lang="ja_JP.UTF-8"
        potkeymap="jp"
    ;;
    "Korean")
        lang="ko_KR.UTF-8"
        potkeymap="kr"
    ;;
    "Norwegian")
        lang="no_NO.UTF-8"
        potkeymap="no"
    ;;
    "Polish")
        lang="pl_PL.UTF-8"
        potkeymap="pl"
    ;;
    "Portuguese (Portugal)")
        lang="pt_PT.UTF-8"
        potkeymap="pt"
    ;;
    "Portuguese (Brazil)")
        lang="pt_BR.UTF-8"
        potkeymap="br"
    ;;
    "Romanian")
        lang="ro_RO.UTF-8"
        potkeymap="ro"
    ;;
    "Russian")
        lang="ru_RU.UTF-8"
        potkeymap="ru"
    ;;
    "Slovak")
        lang="sk_SK.UTF-8"
        potkeymap="sk"
    ;;
    "Spanish")
        lang="es_ES.UTF-8"
        potkeymap="es"
    ;;
    "Spanish (Latin America)")
        lang="es_MX.UTF-8"
        potkeymap="mx"
    ;;
    "Swedish")
        lang="sv_SE.UTF-8"
        potkeymap="sv-latin1"
    ;;
    "Turkish")
        lang="tr_TR.UTF-8"
        potkeymap="tr"
    ;;
    "Ukrainian")
        lang="uk_UA.UTF-8"
        potkeymap="ua"
    ;;
    "Vietnamese")
        lang="vi_VN.UTF-8"
        potkeymap="vn"
    ;;
    "Thai")
        lang="th_TH.UTF-8"
        potkeymap="th"
    ;;
    "Malay")
        lang="ms_MY.UTF-8"
        potkeymap="ms"
    ;;
    "Filipino")
        lang="fil_PH.UTF-8"
        potkeymap="ph"
    ;;
    "Swahili")
        lang="sw_TZ.UTF-8"
        potkeymap="sw"
    ;;
    "Serbian (Cyrillic)")
        lang="sr_Cyrl_RS.UTF-8"
        potkeymap="sr-cyrl"
    ;;
    "Serbian (Latin)")
        lang="sr_Latn_RS.UTF-8"
        potkeymap="sr-latin"
    ;;
    "Persian")
        lang="fa_IR.UTF-8"
        potkeymap="fa"
    ;;
    "Kazakh")
        lang="kk_KZ.UTF-8"
        potkeymap="kk"
    ;;
    "Bengali")
        lang="bn_BD.UTF-8"
        potkeymap="bn"
    ;;
    "Tamil")
        lang="ta_IN.UTF-8"
        potkeymap="ta"
    ;;
    "Telugu")
        lang="te_IN.UTF-8"
        potkeymap="te"
    ;;
    "Gujarati")
        lang="gu_IN.UTF-8"
        potkeymap="gu"
    ;;
    "Marathi")
        lang="mr_IN.UTF-8"
        potkeymap="mr"
    ;;
    "Malayalam")
        lang="ml_IN.UTF-8"
        potkeymap="ml"
    ;;
    "Sinhalese")
        lang="si_LK.UTF-8"
        potkeymap="si"
    ;;
    "Khmer")
        lang="km_KH.UTF-8"
        potkeymap="km"
    ;;
    "Lao")
        lang="lo_LA.UTF-8"
        potkeymap="lo"
    ;;
    "Mongolian")
        lang="mn_MN.UTF-8"
        potkeymap="mn"
    ;;
    "Armenian (Eastern)")
        lang="hy_AM.UTF-8"
        potkeymap="hy"
    ;;
    "Armenian (Western)")
        lang="hyw_AM.UTF-8"
        potkeymap="hyw"
    ;;
    "Azerbaijani (Cyrillic)")
        lang="az_Cyrl_AZ.UTF-8"
        potkeymap="az"
    ;;
    "Azerbaijani (Latin)")
        lang="az_Latn_AZ.UTF-8"
        potkeymap="az"
    ;;
    "Tajik")
        lang="tg_TJ.UTF-8"
        potkeymap="tg"
    ;;
    "Turkmen")
        lang="tk_TM.UTF-8"
        potkeymap="tk"
    ;;
    "Kyrgyz")
        lang="ky_KG.UTF-8"
        potkeymap="ky"
    ;;
    "Uzbek (Cyrillic)")
        lang="uz_Cyrl_UZ.UTF-8"
        potkeymap="uz"
    ;;
    "Uzbek (Latin)")
        lang="uz_Latn_UZ.UTF-8"
        potkeymap="uz"
    ;;
    "Pashto")
        lang="ps_AF.UTF-8"
        potkeymap="ps"
    ;;
    "Kurdish (Kurmanji)")
        lang="ku_TR.UTF-8"
        potkeymap="ku"
    ;;
    "Kurdish (Sorani)")
        lang="ku_IQ.UTF-8"
        potkeymap="ku"
    ;;
    "Scottish Gaelic")
        lang="gd_GB.UTF-8"
        potkeymap="gd"
    ;;
    "Welsh")
        lang="cy_GB.UTF-8"
        potkeymap="cy"
    ;;
    "Irish")
        lang="ga_IE.UTF-8"
        potkeymap="ga"
    ;;
    *)
    ;;
esac

while [[ $lang == "" ]]; do
    clear
    read -p "What language do you want?(LANG to view available languages): " langchoice
    if [[ $langchoice == LANG ]]; then
        echo "Afrikaans, Albanian, Arabic, Armenian, Basque, Belarusian, Bosnian, Bulgarian, Catalan, Chinese (Simplified), Chinese (Traditional), Croatian, Czech, Danish, Dutch, English (US), English (UK), English (Australia), English (Canada), Finnish, French, French (Canada), German, Greek, Hebrew, Hungarian, Icelandic, Italian, Japanese, Korean, Norwegian, Polish, Portuguese (Portugal), Portuguese (Brazil), Romanian, Russian, Slovak, Spanish, Spanish (Latin America), Swedish, Turkish, Ukrainian, Vietnamese, Thai, Malay, Filipino, Swahili, Serbian (Cyrillic), Serbian (Latin), Persian, Kazakh, Bengali, Tamil, Telugu, Gujarati, Marathi, Malayalam, Sinhalese, Khmer, Lao, Mongolian, Armenian (Eastern), Armenian (Western), Azerbaijani (Cyrillic), Azerbaijani (Latin), Tajik, Turkmen, Kyrgyz, Uzbek (Cyrillic), Uzbek (Latin), Pashto, Kurdish (Kurmanji), Kurdish (Sorani), Scottish Gaelic, Welsh and Irish"
        echo ""
        read -p "What language do you want?: " langchoice
    fi
    if [[ $potkeymap ]]; then
        read -p "Do you want to use $potkeymap keymap? y/n: " localekm
        if [[ $localekm == y || $localekm == Y || $localekm == "" ]]; then
            keymapchoice=$potkeymap
        fi
    fi
done

if [[ $keymapchoice != $potkeymap ]]; then
    while [[ $keymap == "" ]]; do
        echo "Afrikaans, Albanian, Arabic, Armenian, Basque, Belarusian, Bosnian, Bulgarian, Catalan, Chinese (Simplified), Chinese (Traditional), Croatian, Czech, Danish, Dutch, English (US), English (UK), English (Australia), English (Canada), Finnish, French, French (Canada), German, Greek, Hebrew, Hungarian, Icelandic, Italian, Japanese, Korean, Norwegian, Polish, Portuguese (Portugal), Portuguese (Brazil), Romanian, Russian, Slovak, Spanish, Spanish (Latin America), Swedish, Turkish, Ukrainian, Vietnamese, Thai, Malay, Filipino, Swahili, Serbian (Cyrillic), Serbian (Latin), Persian, Kazakh, Bengali, Tamil, Telugu, Gujarati, Marathi, Malayalam, Sinhalese, Khmer, Lao, Mongolian, Armenian (Eastern), Armenian (Western), Azerbaijani (Cyrillic), Azerbaijani (Latin), Tajik, Turkmen, Kyrgyz, Uzbek (Cyrillic), Uzbek (Latin), Pashto, Kurdish (Kurmanji), Kurdish (Sorani), Scottish Gaelic, Welsh and Irish"
        echo ""
        read -p "What keymap do you want to use?: " langchoice
        echo "$potkeymap"
        read -p "are you sure? y/n: " kmsure
        if [[ $kmsure == y || $kmsure == Y || $kmsure == "" ]]; then
            keymap=$potkeymap
        fi
    done
fi

clear

unsure=n
while [[ ! ($unsure == y || $unsure == Y || $unsure == "") ]]; do
    read -p "Username: " Username
    read -p "Are you sure? y/n: " unsure
done
upsure=n
while [[ ! ($upsure == y || $upsure == Y || $upsure == "") ]]; do
    read -p "User Password: " UserPassword
    read -p "Are you sure? y/n: " upsure
done
rpsure=n
while [[ ! ($rpsure == y || $rpsure == Y || $rpsure == "") ]]; do
    read -p "Root password: " RootPassword
    read -p "Are you sure? y/n: " rpsure
done
hnsure=n
while [[ ! ($hnsure == y || $hnsure == Y || $hnsure == "") ]]; do
    read -p "Hostname: " Hostname
    echo "Preview (if using bash): [${Username}@${Hostname} ~]$"
    read -p "Are you sure? y/n: " hnsure
done

clear

#---------------------Varible.Set.Above-----------------------------
#---------------------Varible.Act.Below-----------------------------

(
echo g
echo n
echo
echo
echo +1G
echo y
echo t
echo EFI System
echo w
) | fdisk /dev/$DISK
if [[ $swappie == y || $swappie == Y || $swappie == "" ]]; then
(
    echo n
    echo
    echo
    echo +"$swappieSize"G
    echo w
    ) | fdisk /dev/$DISK
fi
if [[ $YesHome == y || $YesHome == Y || $YesHome == "" ]]; then
    (
    echo n
    echo
    echo
    echo +"$RootSize"G
    echo n
    echo
    echo
    echo
    echo w
    ) | fdisk /dev/$DISK
else
    (
    echo n
    echo
    echo
    echo
    echo w
    ) | fdisk /dev/$DISK
fi

mkfs.fat -F 32 /dev/${DISK}${PART_SUFFIX}1
if [[ $swappie == y || $swappie == Y || $swappie == "" ]]; then
    mkswap /dev/${DISK}${PART_SUFFIX}2
    mkfs.ext4 /dev/${DISK}${PART_SUFFIX}3
    if [[ $YesHome == y || $YesHome == Y || $YesHome == "" ]]; then
        mkfs.ext4 /dev/${DISK}${PART_SUFFIX}4
    fi
elif [[ $YesHome == y || $YesHome == Y || $YesHome == "" ]]; then
    mkfs.ext4 /dev/${DISK}${PART_SUFFIX}2
    mkfs.ext4 /dev/${DISK}${PART_SUFFIX}3
else
    mkfs.ext4 /dev/${DISK}${PART_SUFFIX}2
fi

mkdir -p /mnt/boot
mount /dev/${DISK}${PART_SUFFIX}1 /mnt/boot
if [[ $swappie == y || $swappie == Y || $swappie == "" ]]; then
    swapon /dev/${DISK}${PART_SUFFIX}2
    mount /dev/${DISK}${PART_SUFFIX}3 /mnt
    if [[ $YesHome == y || $YesHome == Y || $YesHome == "" ]]; then
        mkdir /mnt/home
        mount /dev/${DISK}${PART_SUFFIX}4 /mnt/home
    fi
elif [[ $YesHome == y || $YesHome == Y || $YesHome == "" ]]; then
    mkdir /mnt/home
    mount /dev/${DISK}${PART_SUFFIX}4 /mnt/home
else
    mount /dev/${DISK}${PART_SUFFIX}2 /mnt
fi

pacstrap -K /mnt base base-devel linux linux-firmware $DisServ $dewmPac $term $driver $userpacs fastfetch htop pavucontrol git networkmanager iwd flatpak

genfstab -U /mnt >> /mnt/etc/fstab

arch-chroot /mnt /bin/bash <<EOF

locale-gen

ln -sf /usr/share/zoneinfo/$regioncity /etc/localtime

hwclock --systohc

echo "LANG=$lang" > /etc/locale.conf

echo "KEYMAP=$keymap" > /etc/vconsole.conf

mkinitcpio -P

echo "root:$RootPassword" | chpasswd

useradd -m -G wheel -s /bin/bash $Username
echo "$Username:$UserPassword" | chpasswd

echo "$Hostname" >> /etc/hostname

bootctl install

cat <<EOL > /boot/loader/loader.conf
default arch
timeout 3
editor 0
EOL

mkdir -p /boot/loader/entries
cat <<EOL > /boot/loader/entries/arch.conf
title Arch Linux
linux /vmlinuz-linux
initrd /initramfs-linux.img
options root=PARTUUID=$(blkid -s PARTUUID -o value /dev/${DISK}${PART_SUFFIX}3) rw
EOL

case $aurchoice in
    "yay")
        sudo pacman -S --needed base-devel git
        git clone https://aur.archlinux.org/yay.git
        cd yay
        makepkg -si

        cd ~
        rm -rf yay
    ;;
    "paru")
        sudo pacman -S --needed base-devel git
        git clone https://aur.archlinux.org/paru.git
        cd paru
        makepkg -si

        cd ~
        rm -rf paru
    ;;
    "pikaur")
        sudo pacman -S --needed base-devel git
        git clone https://aur.archlinux.org/pikaur.git
        cd pikaur
        makepkg -fsri

        cd ~
        rm -rf pikaur
    ;;
    "trizen")
        sudo pacman -S --needed base-devel git
        git clone https://aur.archlinux.org/trizen.git
        cd trizen
        makepkg -si

        cd ~
        rm -rf trizen
    ;;
    "aura")
        sudo pacman -S --needed base-devel git
        git clone https://aur.archlinux.org/aura.git
        cd aura
        makepkg -si

        cd ~
        rm -rf aura
    ;;
    *)
    ;;
esac

if [[ $aurchoice != no ]]; then
    $aurchoice -S $dewmAur $aurpacs
fi

ln -s /usr/local/bin $HOME/.path

EOF
