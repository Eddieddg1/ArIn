#!/bin/bash

set -e

clear

if ! ping -c 1 google.com >/dev/null 2>&1; then
iwctl device list
read -p "Which of the devices do you want to use?: " NETWORKDEVICE
iwctl device $NETWORKDEVICE set-property Powered on
iwctl station $NETWORKDEVICE scan
iwctl station $NETWORKDEVICE get-networks
read -p "Which of the networks do you want to connect to?: " NETWORK
iwctl station $NETWORKDEVICE connect $NETWORK
fi

pacman -Syy

clear

sure1=n
sure2=n
sure3=n
sure4=n

while [[ ! ($sure1 == y && $sure2 == y && $sure3 == y && $sure4 == y || $sure1 == Y && $sure2 == Y && $sure3 == Y && $sure4 == Y || $sure1 == "" && $sure2 == "" && $sure3 == "" && $sure4 == "") ]]; do
    clear

    echo "Available disks:"
    fdisk -l | grep "Disk /dev/"
    read -p "Enter the disk to partition (e.g., sda, nvme0n1): " DISK

    if [[ ! $DISK =~ ^(sd[a-z]|nvme[0-9]n[0-9]|vd[a-z]|md[0-9]|loop[0-9])$ ]]; then
        read -p "Are you sure this is the one? y/n: " sure1
        read -p "Please double check just in case. y/n: " sure2
        read -p "100% sure? y/n: " sure3
        read -p "1000% sure? y/n: " sure4
    elif [[ $DISK =~ ^(sd[a-z]|nvme[0-9]n[0-9]|vd[a-z]|md[0-9]|loop[0-9])$ ]]; then
        read -p "Are you sure? y/n: " sure1
        sure2=$sure1
        sure3=$sure2
        sure4=$sure3
        break
    fi
done

if [[ $DISK == nvme* ]]; then
    PART_SUFFIX="p"
else
    PART_SUFFIX=""
fi

clear

read -p "Do you want a swap partition? y/n: " swappie
if [[ $swappie == y || $swappie == Y || $swappie == "" ]]; then
    read -p "Swap size. Just enter a number, said number will represent GB.(at least 4): " swappieSize
    swAttempts=0
    while [[ $swappieSize -lt 4 ]]; do
        echo "Too small, I said at least '4'."
        read -p "Swap size. Just enter a number, said number will represent GB.(at least 4): " swappieSize
        ((swAttempts++))
        if [[ $swAttempts -ge 10 ]]; then
            swappie=n
            break
        elif [[ $swAttempts -ge 3 ]]; then
            read -p "Do you really want a swap partition? y/n: " reallySwap
            if [[ $reallySwap == n || $reallySwap == N ]]; then
                swappie=n
                break
            fi
        fi
    done
fi

read -p "Do you want a seperate '/home' partition? y/n: " YesHome
if [[ $YesHome == y || $YesHome == Y || $YesHome == "" ]]; then
    read -p "Root partition size. Just enter a number, said number will represent GB.(at least 30): " RootSize
    rtAttempts=0
    while [[ $RootSize -lt 30 ]]; do
        echo "Too small, I said at least '30'."
        read -p "Root partition size. Just enter a number, said number will represent GB.(at least 30): " RootSize
        ((rtAttempts++))
        if [[ $rtAttempts -ge 10 ]]; then
            YesHome=n
            break
        elif [[ $rtAttempts -ge 3 ]]; then
            read -p "Do you really want a swap partition? y/n: " reallyHome
            if [[ $reallyHome == n || $reallyHome == N ]]; then
                YesHome=n
                break
            fi
        fi
    done
fi

clear

read -p "Do you want Wayland or Xorg(X11)?: " wayorg
while [[ ! ($wayorg == wayland || $wayorg == xorg || $wayorg = x11 || $wayorg = X11 || $wayorg = Xorg || $wayorg = Wayland) ]]; do
    echo "Wayland or Xorg"
    read -p "Please, copy one of the options above: " wayorg
done

clear
read -p "Username: " Username
read -p "User Password: " UserPassword
read -p "Root password: " RootPassword
read -p "Hostname: " Hostname

clear

#---------------------Varible.Set.Above-----------------------------
#---------------------Varible.Act.Below-----------------------------

(
echo g
echo n
echo
echo
echo +1G
echo y
echo t
echo EFI System
echo w
) | fdisk /dev/$DISK
if [[ $swappie == y || $swappie == Y || $swappie == "" ]]; then
(
    echo n
    echo
    echo
    echo +"$swappieSize"G
    echo w
    ) | fdisk /dev/$DISK
fi
if [[ $YesHome == y || $YesHome == Y || $YesHome == "" ]]; then
    (
    echo n
    echo
    echo
    echo +"$RootSize"G
    echo n
    echo
    echo
    echo
    echo w
    ) | fdisk /dev/$DISK
else
    (
    echo n
    echo
    echo
    echo
    echo w
    ) | fdisk /dev/$DISK
fi

mkfs.fat -F 32 /dev/${DISK}${PART_SUFFIX}1
if [[ $swappie == y || $swappie == Y || $swappie == "" ]]; then
    mkswap /dev/${DISK}${PART_SUFFIX}2
    mkfs.ext4 /dev/${DISK}${PART_SUFFIX}3
    if [[ $YesHome == y || $YesHome == Y || $YesHome == "" ]]; then
        mkfs.ext4 /dev/${DISK}${PART_SUFFIX}4
    fi
elif [[ $YesHome == y || $YesHome == Y || $YesHome == "" ]]; then
    mkfs.ext4 /dev/${DISK}${PART_SUFFIX}2
    mkfs.ext4 /dev/${DISK}${PART_SUFFIX}3
else
    mkfs.ext4 /dev/${DISK}${PART_SUFFIX}2
fi

mkdir -p /mnt/boot
mount /dev/${DISK}${PART_SUFFIX}1 /mnt/boot
if [[ $swappie == y || $swappie == Y || $swappie == "" ]]; then
    swapon /dev/${DISK}${PART_SUFFIX}2
    mount /dev/${DISK}${PART_SUFFIX}3 /mnt
    if [[ $YesHome == y || $YesHome == Y || $YesHome == "" ]]; then
        mkdir /mnt/home
        mount /dev/${DISK}${PART_SUFFIX}4 /mnt/home
    fi
elif [[ $YesHome == y || $YesHome == Y || $YesHome == "" ]]; then
    mkdir /mnt/home
    mount /dev/${DISK}${PART_SUFFIX}4 /mnt/home
else
    mount /dev/${DISK}${PART_SUFFIX}2 /mnt
fi

pacstrap -K /mnt base base-devel linux linux-firmware fastfetch htop wayland river pavucontrol carla nano steam vlc kde-connect flameshot git alacritty picom awesome networkmanager iwd xorg-server xorg-apps xorg-xinit nvidia-dkms nvidia-settings nvidia-utils flatpak

genfstab -U /mnt >> /mnt/etc/fstab

arch-chroot /mnt /bin/bash <<EOF

locale-gen

ln -sf /usr/share/zoneinfo/Europe/Stockholm /etc/localtime

hwclock --systohc

echo "LANG=en_US.UTF-8" > /etc/locale.conf

echo "KEYMAP=sv-latin1" > /etc/vconsole.conf

mkinitcpio -P

echo "root:$RootPassword" | chpasswd

useradd -m -G wheel -s /bin/bash $Username
echo "$Username:$UserPassword" | chpasswd

echo "$Hostname" >> /etc/hostname

bootctl install

cat <<EOL > /boot/loader/loader.conf
default arch
timeout 3
editor 0
EOL

mkdir -p /boot/loader/entries
cat <<EOL > /boot/loader/entries/arch.conf
title Arch Linux
linux /vmlinuz-linux
initrd /initramfs-linux.img
options root=PARTUUID=$(blkid -s PARTUUID -o value /dev/${DISK}${PART_SUFFIX}3) rw
EOL

git clone https://aur.archlinux.org/yay.git
cd yay
makepkg -si

cd ~
rm -rf yay

ln -s /usr/local/bin $HOME/.path

# chmod +x arch/usr/local/bin/*

# mv arch/* /

yay -S brave-bin minecraft-launcher curseforge vesktop --noconfirm

flatpak install flathub com.obsproject.ObsidianStudio

EOF
