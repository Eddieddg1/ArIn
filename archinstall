#!/bin/bash

set -e

clear

if ! ping -c 1 google.com >/dev/null 2>&1; then
iwctl device list
read -p "Which of the devices do you want to use?: " NETWORKDEVICE
iwctl device $NETWORKDEVICE set-property Powered on
iwctl station $NETWORKDEVICE scan
iwctl station $NETWORKDEVICE get-networks
read -p "Which of the networks do you want to connect to?: " NETWORK
iwctl station $NETWORKDEVICE connect $NETWORK
fi

pacman -Syy

clear

echo "Available disks:"
fdisk -l | grep "Disk /dev/"
read -p "Enter the disk to partition (e.g., sda, nvme0n1): " DISK

if [[ $DISK == nvme* ]]; then
    PART_SUFFIX="p"
else
    PART_SUFFIX=""
fi

clear

reap -p "Do you want a swap partition?: " swappie
reap -p "Swap size.Just enter a number, said number will represent GB.(at least 4): " swappieSize
if [[ $swappieSize < 4 ]]; then
echo "Too small, I said at least "4"."
fi
reap -p "Do you want a seperate "/home" partition?: " YesRoot
reap -p "Root partition size. Just enter a number, said number will represent GB.(at least 30): " RootSize
if [[]]


clear

read -p "Username: " Username
read -p "User Password: " UserPassword
read -p "Root password: " RootPassword
read -p "Hostname: " Hostname

clear

#---------------------Varible.Set.Above-----------------------------
#---------------------Varible.Act.Below-----------------------------

(
echo g
echo n
echo
echo
echo +1G
echo y
echo t
echo EFI System
echo w
) | fdisk /dev/$DISK
if [[ $swappie == y | $swappie == Y | $swappie == "" ]]; then
(
    echo n
    echo
    echo
    echo +4G
    echo w
    ) | fdisk /dev/$DISK
fi
if [[ $YesRoot == y | $YesRoot == Y | $YesRoot == "" ]]; then
    (
    echo n
    echo
    echo
    echo +"$RootSize"G
    echo n
    echo
    echo
    echo
    echo w
    ) | fdisk /dev/$DISK
else
    (
    echo n
    echo
    echo
    echo
    echo w
    ) | fdisk /dev/$DISK
fi

mkfs.fat -F 32 /dev/${DISK}${PART_SUFFIX}1
if [[ $swappie == y | $swappie == Y | $swappie == "" ]]; then
    mkswap /dev/${DISK}${PART_SUFFIX}2
    mkfs.ext4 /dev/${DISK}${PART_SUFFIX}3
    if [[ $YesRoot == y | $YesRoot == Y | $YesRoot == "" ]]; then
        mkfs.ext4 /dev/${DISK}${PART_SUFFIX}4
    fi
elif [[ $YesRoot == y | $YesRoot == Y | $NoRoot == "" ]]; then
    mkfs.ext4 /dev/${DISK}${PART_SUFFIX}2
    mkfs.ext4 /dev/${DISK}${PART_SUFFIX}3
else
    mkfs.ext4 /dev/${DISK}${PART_SUFFIX}2
fi

mkdir -p /mnt/boot
mount /dev/${DISK}${PART_SUFFIX}1 /mnt/boot
swapon /dev/${DISK}${PART_SUFFIX}2
mount /dev/${DISK}${PART_SUFFIX}3 /mnt

pacstrap -K /mnt base base-devel linux linux-firmware fastfetch htop wayland river pavucontrol carla nano steam vlc kde-connect flameshot git alacritty picom awesome networkmanager iwd xorg-server xorg-apps xorg-xinit nvidia-dkms nvidia-settings nvidia-utils flatpak

genfstab -U /mnt >> /mnt/etc/fstab

arch-chroot /mnt /bin/bash <<EOF

locale-gen

ln -sf /usr/share/zoneinfo/Europe/Stockholm /etc/localtime

hwclock --systohc

echo "LANG=en_US.UTF-8" > /etc/locale.conf

echo "KEYMAP=sv-latin1" > /etc/vconsole.conf

mkinitcpio -P

echo "root:$RootPassword" | chpasswd

useradd -m -G wheel -s /bin/bash $Username
echo "$Username:$UserPassword" | chpasswd

echo "$Hostname" >> /etc/hostname

bootctl install

cat <<EOL > /boot/loader/loader.conf
default arch
timeout 3
editor 0
EOL

mkdir -p /boot/loader/entries
cat <<EOL > /boot/loader/entries/arch.conf
title Arch Linux
linux /vmlinuz-linux
initrd /initramfs-linux.img
options root=PARTUUID=$(blkid -s PARTUUID -o value /dev/${DISK}${PART_SUFFIX}3) rw
EOL

git clone https://aur.archlinux.org/yay.git
cd yay
makepkg -si

cd ~
rm -rf yay

ln -s /usr/local/bin $HOME/.path

# chmod +x arch/usr/local/bin/*

# mv arch/* /

yay -S brave-bin minecraft-launcher curseforge vesktop --noconfirm

flatpak install flathub com.obsproject.ObsidianStudio

EOF
